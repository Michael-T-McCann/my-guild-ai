<!-- -*- eval:(visual-line-mode 1) -*- -->

<div data-theme-toc="true"></div>
<div data-guild-docs="true"></div>

## Guild File Format

- TODO: operation only
- TODO: full format

## Operations

### Python Based Operations

Guild assumes that an operation that does not define `main` or `exec` is a Python operation implemented in a module with the same name as the operation.

``` yaml
train:
  description: Python operation implemented in 'train' module
  # main module assumed to be 'train' based on operation name
```

> **NOTE**
Invalid Python module characters in the operation name are converted to underscores `_`. For example, Guild assumes that the operation `mnist-train` is implemented in the Python module named `mnist_train`.

Use the `main` attribute to specify the main Python module for an operation.

``` yaml
train:
  main: mnist_train
```

Use standard Python dot notation to reference a module within a package.

``` yaml
train:
  main: mypackage.train
```

If a module is defined in a sub-directory, precede the module name with the path.

``` yaml
train:
  main: src/train
```

Provide arguments to a module as needed.

``` yaml
train:
  main: main --train
```

> **NOTE**
Guild automatically appends all flag arguments to the `main` spec when the flags interface is `args`. To prevent a flag value from appearing as an argument, set its `arg-skip` attribute to `yes`.

### Other Languages

Use `exec` to define a command for running an operation.

``` yaml
train:
  exec: Rscript train.r
```

Flag values are available as environment variables named `FLAG_<name>`. For example, a flag named `learning_rate` is available as the environment variable `FLAG_learning_rate`.

Alternatively, use command arguments are needed to pass flag values.

``` yaml
train:
  exec: Rscript train.r --learning-rate ${learning-rate}
  flags:
    learning-rate: 0.1
```

Use `${flag_args}` to pass all flags as arguments:

``` yaml
train:
  exec: Rscript train.r ${flag_args}
  flags:
    learning-rate: 0.1
    batch-size: 100
```


## Flags

### Flag Imports

#### Import All Flags

Use `flags-import: all` to import all detected flags.

``` yaml
train:
  flags-import: all
```

#### Import Some Flags

Specify a list of flag names to limit the import.

``` yaml
train:
  flags-import:
    - learning_rate
    - batch_size
    - dropout
```

#### Import All But Some Flags

List flags that you don't want to import using `flags-import-skip`.

``` yaml
train:
  flags-import: all
  flags-import-skip:
    - not_a_flag_1
    - not_a_flag_1
```

### Flags Interface

By default, Guild attempts to detect the flags interface for a Python script as one of either:

- `globals` --- sets flags via Python global variables
- `args` --- sets flags using command line options

> **NOTE**
Guild does not support flags interface detection for non-Python scripts (i.e. scripts run using the `exec` operation attribute). Other languages must read flag values either as command line arguments or from environment variables.

#### Use Global Variables for Python Scripts

If your script does not import `argparse`, Guild will automatically use `globals` as the flags interface.

Set `flags-dest` to `globals` to explicitly and bypass Guild's flags interface detection.

``` yaml
train:
  flags-dest: globals
```

#### Command Line Arguments for Python Scripts

Set `flags-dest` to `args` to cause flag values to be passed as command line arguments. This bypasses Guild's flags interface detection.

``` yaml
train:
  flags-dest: args
```

#### Global Dict for Python Scripts

To set flag values as items of a global Python dict, set `flags-dest` to `global:<var name>` where `<var name>` is the global variable name of the dict.

``` yaml
train:
  flags-dest: global:params
```

#### All Flag Args with `exec`

Use `exec` for non-Python scripts. Flags may be specified as command line arguments using `${flag_args}` in an `exec` command.

``` yaml
train:
  exec: echo ${flag_args}
  flags:
    msg: hello
```

In this case, running `guild run train` generates the following preview message and output:

``` output
You are about to run test
  msg: hello
Continue? (Y/n)
--msg hello
```

#### Flag Values with `exec`

Include specific flag values in an `exec` command using the format `${<flag name>}`:

``` yaml
train:
  exec: echo ${msg}
  flags:
    msg: hello
```

In this case, running `guild run train` generates the following preview message and output:

``` output
You are about to run test
  msg: hello
Continue? (Y/n)
hello
```

### Flag Definitions

Flags are defined by the `flags` operation attribute. If a flag is imported, a flag definition modifies the imported attributes.

#### Simple Flag Definition

When a flag definition consists of a single value, the value is used as the default flag value.

``` yaml
train:
  flags:
    learning-rate: 0.1
    batch-size: 100
```

This is equivalent to:

``` yaml
train:
  flags:
    learning-rate:
      default: 0.1
    batch-size:
      default: 100
```

#### Flag Help

The flag `description` attribute is used to provide help for a flag.

``` yaml
train:
  flags:
    learning-rate:
      description: Learning rate used for training
      default: 0.1
    batch-size:
      description: Batch size used for training
      default: 100
```

This help is shown when running `guild run train --help-op` and `guild help`.

#### Require a Flag Value

Set `required` to `yes` to prevent `null` flag values.

``` yaml
train:
  flags:
    data:
      description: Location of data file
      required: yes
```

#### Flag Choices

Specify a list of values for `choices` to limit user input to those values.

``` yaml
train:
  flags:
    optimizer:
      choices:
       - adam
       - sgd
       - rmsprop
      default: sgd
```

Choice options may be mappings that include `description`, which is used in operation help. When providing `description` you must also provide `value`.

``` yaml
train:
  flags:
    optimizer:
      choices:
       - value: adam
         description: Adam optimizer
       - value: sgd
         description: Stochastic gradient descent optimizer
       - value: rmsprop
         description: RMSProp optimizer
      default: sgd
```

Use `required` with choices to require one of the options.

``` yaml
train:
  flags:
    dropout:
      choices: [0.1, 0.2, 0.3]
      required: yes
```

#### Other Values for Choice

Set `allow-other` to `yes` to let the user specify a value other than the choices. Choices are still shown in help for the operation.

``` yaml
train:
  flags:
    dropout: [0.1, 0.2, 0.3]
    allow-other: yes
```

#### Flag Types

By default, Guild applies the rules described in [Flag Value Decoding](/flags.md#flag-value-decoding) when decoding user-provided flag values. Define a type when you need to validate user input or explicitly convert values that might be incorrectly decoded.

``` yaml
train:
  flags:
    data:
      type: existing-path
      default: data
    data-digest:
      type: string
      required: yes
    learning-rate:
      type: float
      default: 0.1
```

#### Rename Flag Argument

By default Guild uses the flag name for a command line option in the format `--<flag name> <flag value>`. To change the argument name, use `arg-name`.

``` yaml
train:
  flags:
    learning-rate:
      arg-name: lr
```

In this case, the flag argument will be `--lr <value>`.

#### Specify Flag Global Variable

Use `arg-name` with `globals` flags interface to set the variable name for a flag.

``` yaml
train:
  flags-dest: globals
  flags:
    learning-rate:
      arg-name: lr
```

In this case, the value for `learning-rate` is written to the script global varable `lr`.

#### Specify Flag Global Nesting

Use `arg-name` with `global:<var name>` to specify how the flag value is written to the global dict `<var name>`.

``` yaml
train:
  flags-dest: global:params
  flags:
    learning-rate:
      arg-name: train.lr
```

In this case, the value for `learning-rate` is written to the global variable `params` such that it can be read as `params['train']['lr']`.

## Dependencies

TODO

## Output Scalars

### Default Output Scalars

If `output-scalars` is not defined for an operation, Guild assumes the following:

``` yaml
train:
  output-scalars: '(\key): (\value)'
```

> **NOTE**
The values `\key`, `\value`, and `\step` (used below) are Guild-specific macros used to capture different types of values. You are free to use any regular expression pattern. These macros are conveniences.
>
> - `\key` is equivalent to `[^ \t]+`
> - `\value` is equivalent to `[0-9\\.e\\-]+`
> - `\step` is equivalent to `[0-9]+`

### Disable output scalars

Disable output scalars when you log scalars explicitly to summaries.

``` yaml
train:
  output-scalars: no
```

### Map Scalar Keys to Patterns

Use when you have a limited number of scalars or want to strictly control what's captured.

``` yaml
train:
  output-scalars:
    step: 'Training epoch (\step)'
    loss: 'Validation loss: (\value)'
```

### Capture Scalar Key

Capture both key and value by specifying two capture groups. Use whenever possible as this method automatically captures new scalars that match the format.

``` yaml
train:
  output-scalars: ' - (\key): (\value)'
```

> **NOTE**
The captured key is always the *first group* and value is the *second group*. `\key` and `\value` above are pattern templates and are not used to identify what is captured.
>
> To reverse the order, use named groups with names `_key` and `_val` for the key and value groups respectively.
>
>``` yaml
> output-scalars: '(?P<_val>\value): (?P<_key>\key)'
>```

### Named Capture Groups

Use named capture groups to specify the key for a particular pattern.

``` yaml
train:
  output-scalars: 'epoch (?P<step>\step) - train loss (?P<loss>\value) - val loss (?P<val_loss>\value)'
```

#### Multiple Output Scalar Specs

Use a list of specs as needed to define output scalars.

``` yaml
train:
  output-scalars:
    - 'Epoch (?P<step>\step)'
    - loss: 'loss: (\value)'
      acc: 'accuracy: (\value)'
    - '(\key)=(\value)'
```

## Source Code

Use the `sourcecode` attribute to define source code copy rules for an operation. You can also define `sourcecode` for a model, in which case the model rules are applied before applying operation level rules. For more information, see [*Guild File Reference - Source Code*](/reference/guildfile#source-code).

Example of operation-level rules:

``` yaml
train:
  sourcecode:
    - '*.py'
    - '*.yml'
```

Example of model-level rules:

``` yaml
- model: cnn
  sourcecode:
    - '*.py'
    - '*.yml'
```

Use `--test-sourcecode` with [`guild run`](/commands/run) to show which files are copied for an operation based on the current source code configuration.

By default, Guild considers all project text files to be source code. Guild uses safeguards to skip large files and avoid copying too many files. To skip these safeguards, define `sourcecode` for an operation.

Copy only files matching patterns:

``` yaml
train:
  sourcecode:
    - '*.py'
    - '*.yml'
    - README.md
```

Extend default rules to include additional files matching a pattern:

``` yaml
train:
  sourcecode:
    - include: '*.png'
```

Extend default rules to exclude files matching a pattern:

``` yaml
train:
  sourcecode:
    - exclude: '*.csv'
```

Exclude a directory (improves performance for directories containing many files):

``` yaml
train:
  sourcecode:
    - exclude:
        dir: data
```

Use a different source code root:

``` yaml
train:
  sourcecode:
    root: ../src
```

Use a different source code root with modified rules:

``` yaml
train:
  sourcecode:
    root: ../src
    select:
      - '*.py'
      - '*.yml'
```

Copy the source code to the run directory root:

``` yaml
train:
  sourcecode:
    dest: .
```

Copy the source code to a `src` subdirectory in the run directory:

``` yaml
train:
  sourcecode:
    dest: src
    select:
    select:
      - '*.py'
      - '*.yml'
```

Disable source code:

``` yaml
train:
  sourcecode: no
```
