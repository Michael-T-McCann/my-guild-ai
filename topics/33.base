<div data-theme-toc="true"></div>

## Python Based Operations

Guild assumes that an operation that does not define `main` or `exec` is a Python operation implemented in a module with the same name as the operation.

``` yaml
train:
  description: Python operation implemented in 'train' module
  # main module assumed to be 'train' based on operation name
```

> **NOTE**
Invalid Python module characters in the operation name are converted to underscores ``_``. For example, Guild assumes that the operation ``mnist-train`` is implemented in the Python module named ``mnist_train``.

Use the `main` attribute to specify the main Python module for an operation.

``` yaml
train:
  main: mnist_train
```

Use standard Python dot notation to reference a module within a package.

``` yaml
train:
  main: mypackage.train
```

If a module is defined in a sub-directory, precede the module name with the path.

``` yaml
train:
  main: src/train
```

Provide arguments to a module as needed.

``` yaml
train:
  main: main --train
```

> **NOTE**
Guild automatically appends all flag arguments to the `main` spec when the flags interface is `args`. To prevent a flag value from appearing as an argument, set its `arg-skip` attribute to `yes`.

## Other Languages

Use `exec` to define a command for running an operation.

``` yaml
train:
  exec: Rscript train.r
```

Flag values are available as environment variables named `FLAG_<name>`. For example, a flag named `learning_rate` is available as the environment variable `FLAG_learning_rate`.

Alternatively, use command arguments are needed to pass flag values.

``` yaml
train:
  exec: Rscript train.r --learning-rate ${learning-rate}
  flags:
    learning-rate: 0.1
```

Use ``${flag_args}`` to pass all flags as arguments:

``` yaml
train:
  exec: Rscript train.r ${flag_args}
  flags:
    learning-rate: 0.1
    batch-size: 100
```
