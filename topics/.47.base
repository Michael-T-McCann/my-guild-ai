<!-- -*- eval:(visual-line-mode 1) -*- -->

<div data-theme-toc="true"></div>
<div data-guild-docs="true"></div>

## Overview

In the [previous section](/start/guildfile) you use a Guild file to define a `train` operation. In this section, you enhance the project by adding a real-world classifier.

You cover:

- Multiple [models](/docs/guildfiles#models) in a single project
- Guild [environments](/docs/environments) to isolate project work

## Download Classifier Script

Download [`plot_iris_exercise.py`](https://raw.githubusercontent.com/guildai/examples/master/iris-svm/plot_iris_exercise.py) and save it to the `guild-start` directory.

The script, which is adapted from [*scikit-learn SVM Exercise*](https://scikit-learn.org/stable/auto_examples/exercises/plot_iris_exercise.html), trains a model on the Iris benchmark data set.

The `guild-start` directory should look like this:

> <span data-guild-class="ls-dir-open">guild-start</span>
<span data-guild-class="ls-dir ls-1">archived-runs</span>
<span data-guild-class="ls-file ls-1">guild.yml</span>
<span data-guild-class="ls-file ls-1">plot_iris_exercise.py</span>
<span data-guild-class="ls-file ls-1">train.py</span>

## Add `iris-svm` Model to guild.yml

In the `guild-start` directory, modify `guild.yml` by adding the `iris-svn` model below.

The final modified `guild.yml` should be:

``` yaml
- model: sample
  description: A sample model
  operations:
    train:
      description: Sample training script
      main: train
      flags-import: all
      output-scalars: '(\key): (\value)'

- model: iris-svm
  description: Iris classifier using a support vector machine (SVM)
  operations:
    train:
      description: Train SVM model on Iris data set
      main: plot_iris_exercise
      flags:
        kernel:
          description: SVM kernel type
          default: rbf
          choices: [linear, poly, rbf]
        test_split:
          description: Percentage of examples held out for test
          default: 0.2
        random_seed:
          description: Seed used for shuffling data
          default: 0
        degree:
          description: Degree of the poly kernel function
          default: 3
        gamma:
          description: Kernel coefficient for rbf and poly
          default: 10
      output-scalars:
        train_accuracy: 'Train accuracy: (\value)'
        test_accuracy: 'Test accuracy: (\value)'
```

<span data-guild-class="caption">`guild.yml` after adding `iris-svm` model</span>

The file defines two models: `sample` and `iris-svm`. The `sample` model provides the `train` operation from the [previous step](/start/guildfile). The `iris-svm` is a new model, which you add in this section.

> <span data-guild-class="callout highlight">Highlight</span> Use models to group related sets of operations. Models generally correspond to the structures that you train and test with data, though you're free to define models for other purposes. For more information, see [*Models*](/docs/guildfiles#models).

The Guild file format changes from a mapping of operations, known as [*operation only format*](/reference/guildfile#operation-only-format), to a list of top-level objects, known as [*full format*](/reference/guildfile#full-format). Guild supports these two formats to accommodate different requirements. Use *operation only format* when starting to keep your Guild file as simple as possible. Migrate to *full format* as needed to support more configuration.

Below is a description of the `iris-svm:train` attributes.

<div data-guild-class="terms">

|||
|-|-|
| `description` | A description of the operation. |
| `main` | The Python module that implements the operation. |
| `flags` | A mapping of flag *name* to flag *definition*. Each flag provides a description, which is used in help text, and a default value. The `kernel` flag defines a list of valid *choices*---one for each supported kernel. For more information, see [*Flags*](/docs/flags). |
| `output-scalars` | Patterns used to capture [output scalars](/docs/scalars#output-scalars). In this case, the capture patterns are different from those of `sample:train`. This accommodates the different output generated by the module. |

</div>

> <span data-guild-class="callout highlight">Highlight</span> Rather than require changes to `plot_iris_exercise.py` to support Guild-specific output patterns, you change `guild.yml`. This keeps your project source code independent of external tooling.

Verify that the operations are available:

``` command
guild ops
```

``` output
iris-svm:train  Train SVM model on Iris data set
sample:train    Generate a sample loss
```

> <span data-guild-class="callout note">Note</span> [`guild ops`](/commands/ops) is a shortened alias for [`guild operations`](/commands/operations).

If you don't see `iris-svm:fit` in the list, verify that `guild.yml` is the same as above and that you're running the command from the `guild-start` directory.

Show the project models:

``` command
guild models
```

``` output
iris-svm  Iris classifier using a support vector machine (SVM)
sample    A sample model
```

Show help for the project:

``` command
guild help
```

[details="Output"]
``` output
OVERVIEW

    You are viewing help for operations defined in the current directory.

    To run an operation use 'guild run OPERATION' where OPERATION is one
    of options listed below. If an operation is associated with a model,
    include the model name as MODEL:OPERATION.

    To list available operations, run 'guild operations'.

    Set operation flags using 'FLAG=VALUE' arguments to the run command.
    Refer to the operations below for a list of supported flags.

    For more information on running operations, try 'guild run --help'.
    For general information, try 'guild --help'.

MODELS

    iris-svm

      Iris classifier using a support vector machine (SVM)

      Operations:

        train
          Train SVM model on Iris data set

          Flags:
            degree       Degree of the poly kernel function (default is 3)
            gamma        Kernel coefficient for rbf and poly (default is 10)
            kernel       SVM kernel type (default is rbf)

                         Choices:  linear, poly, rbf

            random_seed  Seed used for shuffling data (default is 0)
            test_split   Percentage of examples held out for test (default is 0.2)

    sample

      A sample model

      Operations:

        train
          Sample training script

          Flags:
            noise  (default is 0.1)
            x      (default is 0.1)

```
[/details]

> <span data-guild-class="callout highlight">Highlight</span> Use a Guild file to document your project capabilities to help others use it effectively.

## Create a Guild Environment

In this section, you create a project-specific *environment* to keep project libraries and runs separate from other projects. For more information, see [*Environments*](/docs/environments).

### Create `requirements.txt`

Guild uses `requirements.txt` to install required packages when creating an environment.

In the `guild-start` project directory, create a file named `requirements.txt` that specifies the Python packages required by the project. For this project, the file should be:

``` txt
matplotlib
scikit-learn
```

<span data-guild-class="caption">`requirements.txt` --- specifies Python packages required by the project</span>

Your project directory should look like this:

> <span data-guild-class="ls-dir-open">guild-start</span>
<span data-guild-class="ls-dir ls-1">archived-runs</span>
<span data-guild-class="ls-file ls-1">guild.yml</span>
<span data-guild-class="ls-file ls-1">plot_iris_exercise.py</span>
<span data-guild-class="ls-file ls-1">requirements.txt</span>
<span data-guild-class="ls-file ls-1">train.py</span>

### Initialize the Environment

Having adding `requirements.txt` to the project, initialize a new environment in the project using [`guild init`](/commands/init):

``` command
guild init
```

Guild prompts with the environment settings. Press **Enter** to create the environment.

Guild initializes a virtual environment in the project under a `venv` subdirectory.

Your project directory should look like this:

> <span data-guild-class="ls-dir-open">guild-start</span>
<span data-guild-class="ls-dir ls-1">archived-runs</span>
<span data-guild-class="ls-file ls-1">guild.yml</span>
<span data-guild-class="ls-file ls-1">plot_iris_exercise.py</span>
<span data-guild-class="ls-file ls-1">requirements.txt</span>
<span data-guild-class="ls-file ls-1">train.py</span>
<span data-guild-class="ls-dir ls-1">venv</span>

### Activate the Environment

To use an environment, you *activate* it within each terminal session that uses it.

If you're running Linux, macOS, or POSIX compliant shell, activate the environment by running:

``` command
source guild-env
```

If you're running Windows, activate the environment by running:

``` command
venv\Scripts\activate.bat
```

> <span data-guild-class="callout note">Note</span> You can always use the traditional method of activating a virtual environment created with [`guild init`](/commands/init). Guild environments are standard Python virtual environments.

When you activate an environment, Guild uses the environment Python runtime and installed libraries. Guild also stores runs within the environment.

Use [`guild check`](/commands/check) to confirm that Guild uses the activated environment:

``` command
guild check
```

Note the location of `guild_home` --- it should be located under the project directory in `venv/.guild`.

List the current runs:

``` command
guild runs
```

The list is empty because you haven't generated any runs in current environment.

## Train the Classifier

In the activated environment, run the `iris-svm:train` operation:

``` command
guild run iris-svm:train
```

``` output
You are about to run iris-svm:train
  degree: 3
  gamma: 10
  kernel: rbf
  random_seed: 0
  test_split: 0.2
Continue? (Y/n)
```

Press **Enter** to start the operation.

Guild runs the operation, which is implemented by the [`plot_iris_exercise` module](https://github.com/guildai/guildai/blob/master/examples/iris-svm/plot_iris_exercise.py).

Guild uses the default flag values defined for the operation in `guild.yml`, which you define above.

## View Results

List files generated by the run:

``` command
guild ls
```

``` output
~/guild-start/venv/.guild/runs/c564a767a188438282b925389de45e40:
  plot.png
```

In addition to fitting a model and printing accuracy results, the operation [generates a plot](https://github.com/guildai/guildai/blob/master/examples/iris-svm/plot_iris_exercise.py#L49-L74) showing classification results of the Iris test data set.

Open the plot using the default application for your system:

``` command
guild open -p plot.png
```

Guild opens the plot generate by `iris-svm:train`, which shows how test samples are classified.

![classifier-plot|509x500, 85%](upload://n65oI1JVSbVMmtjxsZjCZP0PpH2.png)

<span data-guild-class="caption">Viewing `plot.png` on Linux using Xviewer</span>

Use an alternative program to open a file by specifying the `--cmd` option. For example, to open `plot.png` in [GIMP](https://www.gimp.org/), use:

``` command
guild open -p plot.png --cmd gimp
```

<span data-guild-class="caption">Specify the program used to open a file with `--cmd` (this example requires that GIMP be installed)</span>

> <span data-guild-class="callout highlight">Highlight</span> Guild integrates with your favorite tools, rather than attempt to replace them.

## Experiment with Different Kernels

Run `mnist-svm:train` again using each the other SVM kernels:

``` command
guild run iris-svm:train kernel='[linear,poly]'
```

``` output
You are about to run iris-svm:train as a batch (2 trials)
  degree: 3
  gamma: 10
  kernel: [linear, poly]
  random_seed: 0
  test_split: 0.2
Continue? (Y/n)
```

Press **Enter** to confirm.

Guild runs `iris-svm:train` twice --- once for each specified kernel.

## Compare Runs

Use [`guild compare`](/commands/compare) to compare results:

``` command
guild compare
```

Use the right arrow key to move the cursor to view values for `test_accuracy`. Note that the `linear` kernel performs better the other two, at least with the default hyperparameters.

Press **q** to exit Guild Compare.

Compare run plots using TensorBoard:

``` command
guild tensorboard --tab images
```

Guild starts TensorBoard and opens the **Images** tab. TensorBoard shows each plot generated by the three runs. To improve image quality, select **Show actual image size** in the upper-left of the display.

![classifier-tb|690x167](upload://v8pq0rnXPJP4vfrt6NPQUPhqxIY.png)

<span data-guild-class="caption">Compare run-generated images using TensorBoard</span>

> <span data-guild-class="callout highlight">Highlight</span> Guild automatically shows run-generated images in TensorBoard so you don't need to log them as summaries. This is a useful way to compare run plots and other images side-by-side.

Return to the command terminal and press **Ctrl-C** to stop TensorBoard.

## Summary

In this section you add `iris-svm` to your project. The model defines a `train` operation, which runs the Python module `plot_iris_exercise` to fit a support vector machine to the Iris data set.

Congratulations --- you completed this introduction to Guild AI!

> <span data-guild-class="callout highlight">Highlights</span> In this introduction, you cover fundamental concepts and practices:
>
>- [Runs](/docs/runs)
>- [Operations](/docs/operations)
>- [Hyperparameter optimization](/docs/optimization)
>- [Environments](/docs/environments)
>- Evaluating results in [Guild View](/docs/view), [Guild Compare](/docs/compare), and [TensorBoard](/docs/tensorboard)

Now that you're familiar with Guild, try using it for your own work.

<span data-guild-class="next btn">[Use Guild in a Project](/start/use-guild)</span>
