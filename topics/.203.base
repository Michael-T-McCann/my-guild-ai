<!-- -*- eval:(visual-line-mode 1) -*- -->

<div data-theme-toc="true"></div>
<div data-guild-docs="true"></div>

## Overview

In previous sections of [this guide](/start) you learn about Guild's core features. In this section, you learn how to apply Guild to your work.

Previous sections guide you step-by-step. This section is conceptual. It provides a framework for making your own decisions.

In the simplest case, you can run your training script with Guild like this:

``` command
guild run train.py
```

While this is a convenient starting point, it's limited because Guild makes assumptions about your script. Use a [Guild file](/docs/guildfiles) to explicitly define the operations for your project and take advantage of Guild's features.

The simplest Guild file for `train.py` consists of two lines:

``` yaml
train:
  flags-import: all
```

<span data-guild-class="caption">`guild.yml` --- defines a single `train` operation that runs the `train.py` script</span>

Chances are your project a bit more configuration! In the sections that follow, you examine your training scripts and create a Guild file that's suitable for your project.

> <span data-guild-class="callout note">Note</span> This guide applies to Python based projects. If your project uses a different language, refer to [*Languages Example*](/examples/languages).

## Identify the Main Module

To define a Guild operation, first identify the Python module to run. In some cases, the module is obvious. For more complex projects, it can take some investigating.

If you don't know what module to run, study the project README or other documentation.

Your project may support more than one operation. For example, it may support both *training* and *testing* a model. In this case, select the primary operation, which is usually related to training a model. You can add support for other operations over time.

## Run Without Guild

Before configuring a Guild operation, run your operation directly with Python. This step establishes baseline functionality. If you're unable to run the operation directly with Python, resolve outsanding issues before proceeding.

> <span data-guild-class="callout tip">Tip</span> If your baseline operation takes more than 10 seconds, consider ways to reduce its run time. In many cases, this is a matter of reducing the number of training epochs, steps, or data records that are processed. Your goal should be to run all of the setup and tear down steps and a minimal number of in-between iterations while keeping run time under 10 seconds.

## Understand the Operation Interface

When you run the operation, consider its *interface*. The interface consists of operations *inputs* and *outputs*.

Operation inputs:

- Settings related to model architecture and related algorithms --- these are referred to as *hyperparameters*
- Other settings used by the script such as file locations, database credentials, etc.
- Required files

Operation outputs:

- Generated files
- Logged metrics --- these are referred to as *scalars*

The sections below help you identify the operation interface. With this information you later [define the operation](#define-the-operation).

### How are operation settings specified?

Python based operations are configured in various ways:

- Global variables
- Environment variables
- Command line arguments
- Configuration files
- In-place values

Guild supports each of these methods except the last. In-place values are not easily or safely modified and should be avoided.

#### Global variables

The use of global variables is perhaps the most popular method for defining operation settings.

Most Keras examples use this method. Consider [`mnist_mlp.py`](https://raw.githubusercontent.com/guildai/guildai/master/examples/use-guild/mnist_mlp.py). This module defines three global variables that can be modified by editing the source code. Two of these variables are *hyperparameters*: *`batch_size`* and *`epochs`*.

https://github.com/guildai/guildai/blob/master/examples/use-guild/mnist_mlp.py#L16-L18

#### Environment variables

#### Command line arguments

#### Configuration files

#### In-place values


### What input files does the operation require?

### What output files does the operation generate?

### What metrics does the operation log?



## Define the Operation

Define the
